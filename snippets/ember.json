{

  "run(() => { ... })": {
    "prefix": "run",
    "body": [
      "run(() => {",
      "\t${1}",
      "});"
    ],
    "description": "Ember"
  },

  "let ... get(...)": {
    "prefix": "lget",
    "body": [
      "let $1 = ${2:this}.get('$1');"
    ],
    "description": "Ember"
  },

  ".set(...)": {
    "prefix": "set",
    "body": [
      "${1:this}.set('${2}', ${3});"
    ],
    "description": "Ember"
  },

  ".get(...)": {
    "prefix": "get",
    "body": [
      "${1:this}.get('${2}');"
    ],
    "description": "Ember"
  },

  "this._super(...)": {
    "prefix": "set",
    "body": [
      "this._super(...arguments);"
    ],
    "description": "Ember"
  },

  "init() { ... }": {
    "prefix": "init",
    "body": [
      "init() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "service(...)": {
    "prefix": "service",
    "body": [
      "service(${1}),"
    ],
    "description": "Ember"
  },

  "observer(...)": {
    "prefix": "observer",
    "body": [
      "observer('${1:property}', function() {",
      "\t${2:// body}",
      "}),"
    ],
    "description": "Ember"
  },

  "on(...)": {
    "prefix": "on",
    "body": [
      "on('${1:property}', function() {",
      "\t${2:// body}",
      "}),"
    ],
    "description": "Ember"
  },

  "actions: { ... }": {
    "prefix": "actions",
    "body": [
      "actions: {",
      "\t${1:// body}",
      "},"
    ],
    "description": "Ember"
  },

  "computed(...)": {
    "prefix": "computed",
    "body": [
      "computed('${1:property}', function() {",
      "\t${2:// body}",
      "}),"
    ],
    "description": "Ember"
  },

  "alias(...)": {
    "prefix": "calias",
    "body": [
      "alias('${1:key}')"
    ],
    "description": "Ember Computed"
  },

  "and(...)": {
    "prefix": "cand",
    "body": [
      "and('${1:key1}', '${2:key2}')"
    ],
    "description": "Ember Computed"
  },

  "bool(...)": {
    "prefix": "cbool",
    "body": [
      "bool(${1:key})"
    ],
    "description": "Ember Computed"
  },

  "collect(...)": {
    "prefix": "ccollect",
    "body": [
      "collect(${1:keys})"
    ],
    "description": "Ember Computed"
  },

  "empty(...)": {
    "prefix": "cempty",
    "body": [
      "empty('${1:key}')"
    ],
    "description": "Ember Computed"
  },

  "equal(...)": {
    "prefix": "cequal",
    "body": [
      "equal('${1:key}', ${2:value});"
    ],
    "description": "Ember Computed"
  },

  "filter(...)": {
    "prefix": "cfilter",
    "body": [
      "filter(${1:key}, function(${2:item}${3:, index}) {",
      "\treturn ${2:item};",
      "}));"
    ],
    "description": "Ember Computed"
  },

  "filterBy(...)": {
    "prefix": "cfilterBy",
    "body": [
      "filterBy('${1:key}', ${2:propertyKey}, ${3:value});"
    ],
    "description": "Ember Computed"
  },

  "gt(...)": {
    "prefix": "cgt",
    "body": [
      "gt('${1:key}', ${2:value});"
    ],
    "description": "Ember Computed"
  },

  "gte(...)": {
    "prefix": "cgte",
    "body": [
      "gte('${1:key}', ${2:value});"
    ],
    "description": "Ember Computed"
  },

  "intersect(...)": {
    "prefix": "intersect",
    "body": [
      "intersect(${1})"
    ],
    "description": "Ember Computed"
  },

  "lt(...)": {
    "prefix": "clt",
    "body": [
      "lt('${1:key}', ${2:value});"
    ],
    "description": "Ember Computed"
  },

  "lte(...)": {
    "prefix": "clte",
    "body": [
      "lte('${1:key}', ${2:value});"
    ],
    "description": "Ember Computed"
  },

  "map(...)": {
    "prefix": "cmap",
    "body": [
      "map(${1:key}, function(${2:item}${3:, index}) {",
      "\treturn ${2:item};",
      "}));"
    ],
    "description": "Ember Computed"
  },

  "mapBy(...)": {
    "prefix": "cmapBy",
    "body": [
      "mapBy('${1:key}', '${2:propertyKey}');"
    ],
    "description": "Ember Computed"
  },

  "match(...)": {
    "prefix": "cmatch",
    "body": [
      "match('${1:key}', ${2:regEx});"
    ],
    "description": "Ember Computed"
  },

  "max(...)": {
    "prefix": "cmax",
    "body": [
      "max('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "min(...)": {
    "prefix": "cmin",
    "body": [
      "min('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "none(...)": {
    "prefix": "cnone",
    "body": [
      "none('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "not(...)": {
    "prefix": "cnot",
    "body": [
      "not('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "notEmpty(...)": {
    "prefix": "cnotEmpty",
    "body": [
      "notEmpty('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "oneWay(...)": {
    "prefix": "coneWay",
    "body": [
      "oneWay('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "or(...)": {
    "prefix": "cor",
    "body": [
      "or('${1:key1}', '${2:key2}');"
    ],
    "description": "Ember Computed"
  },

  "readOnly(...)": {
    "prefix": "creadOnly",
    "body": [
      "readOnly('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "reads(...)": {
    "prefix": "creads",
    "body": [
      "reads('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "setDiff(...)": {
    "prefix": "csetDiff",
    "body": [
      "setDiff('${1:key1}', '${2:key2}');"
    ],
    "description": "Ember Computed"
  },

  "sort(...)": {
    "prefix": "csort",
    "body": [
      "sort('${1:itemsKey}', '${2:sortDefinition}');"
    ],
    "description": "Ember Computed"
  },

  "sum(...)": {
    "prefix": "csum",
    "body": [
      "sum('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "union(...)": {
    "prefix": "cunion",
    "body": [
      "union('${1:key1}', '${2:key2}');"
    ],
    "description": "Ember Computed"
  },

  "uniq(...)": {
    "prefix": "cuniq",
    "body": [
      "uniq('${1:key}', '${2:propertyKey}');"
    ],
    "description": "Ember Computed"
  },

  "uniqBy(...)": {
    "prefix": "cuniqBy",
    "body": [
      "uniqBy('${1:key}');"
    ],
    "description": "Ember Computed"
  },

  "bind(...)": {
    "prefix": "bind",
    "body": [
      "bind(${1:this}, ${2:this.methodName});"
    ],
    "description": "Ember"
  },

  "cancel(...)": {
    "prefix": "cancel",
    "body": [
      "cancel('${1:key}');"
    ],
    "description": "Ember"
  },

  "debounce(...)": {
    "prefix": "debounce",
    "body": [
      "debounce(${1:this}, '${2:methodName}', ${3:500});"
    ],
    "description": "Ember"
  },

  "later(...)": {
    "prefix": "later",
    "body": [
      "later(${1:this}, () => { ${2}\\}, ${3:500});"
    ],
    "description": "Ember"
  },

  "next(...)": {
    "prefix": "next",
    "body": [
      "next(${1:this}, () => { ${2}\\});"
    ],
    "description": "Ember"
  },

  "once(...)": {
    "prefix": "once",
    "body": [
      "once(${1:this}, () => { ${2}\\});"
    ],
    "description": "Ember"
  },

  "run(...)": {
    "prefix": "run",
    "body": [
      "run(() => { ${1}\\});"
    ],
    "description": "Ember"
  },

  "schedule(...)": {
    "prefix": "schedule",
    "body": [
      "schedule('${1:queue}', ${2:this}, () => { ${3}\\}, );"
    ],
    "description": "Ember"
  },

  "scheduleOnce(...)": {
    "prefix": "scheduleOnce",
    "body": [
      "scheduleOnce('${1:queue}', ${2:this}, () => { ${3}\\}, );"
    ],
    "description": "Ember"
  },

  "throttle(...)": {
    "prefix": "throttle",
    "body": [
      "throttle(${1:this}, '${2:methodName}', ${3:500});"
    ],
    "description": "Ember"
  },

  "Route: model(...) { ... }": {
    "prefix": "model",
    "body": [
      "model(params = {}) {",
      "\treturn this.store.query('${1}', params);",
      "},"
    ],
    "description": "Ember"
  },

  "setupController(...) { ... }": {
    "prefix": "setupController",
    "body": [
      "setupController(controller, model) {",
      "\tthis._super(controller, model);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Route: beforeModel(...) { ... }": {
    "prefix": "beforeModel",
    "body": [
      "beforeModel(transition) {",
      "\tthis._super(controller, model);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Route: afterModel(...) { ... }": {
    "prefix": "afterModel",
    "body": [
      "afterModel(model, transition) {",
      "\tthis._super(controller, model);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: didReceiveAttrs() { ... }": {
    "prefix": "didReceiveAttrs",
    "body": [
      "didReceiveAttrs() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: didRender() { ... }": {
    "prefix": "didRender",
    "body": [
      "didRender() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: didUpdateAttrs() { ... }": {
    "prefix": "didUpdateAttrs",
    "body": [
      "didUpdateAttrs() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: willUpdate() { ... }": {
    "prefix": "willUpdate",
    "body": [
      "willUpdate() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: didInsertElement() { ... }": {
    "prefix": "didInsertElement",
    "body": [
      "didInsertElement() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: willDestroyElement() { ... }": {
    "prefix": "willDestroyElement",
    "body": [
      "willDestroyElement() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: willClearElement() { ... }": {
    "prefix": "willClearElement",
    "body": [
      "willClearElement() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  "Component: didDestroyElement() { ... }": {
    "prefix": "didDestroyElement",
    "body": [
      "didDestroyElement() {",
      "\tthis._super(...arguments);",
      "\t${1}",
      "},"
    ],
    "description": "Ember"
  },

  ".filterBy(...)": {
    "prefix": "filterBy",
    "body": [
      "${1:enumerable}.filterBy('${2:property}', ${3:value});"
    ],
    "description": "Ember Enumerable"
  },

  ".mapBy(...)": {
    "prefix": "mapBy",
    "body": [
      "${1:enumerable}.mapBy('${2:property}');"
    ],
    "description": "Ember Enumerable"
  },

  ".every(...)": {
    "prefix": "every",
    "body": [
      "${1:enumerable}.every(function(${2:item}) {",
      "\t${3}",
      "});"
    ],
    "description": "Ember Enumerable"
  },

  ".isEvery(...)": {
    "prefix": "is-every",
    "body": [
      "${1:enumerable}.isEvery('${2:property}', ${3:bool});"
    ],
    "description": "Ember Enumerable"
  },

  ".some(...)": {
    "prefix": "some",
    "body": [
      "${1:enumerable}.some(function(${2:item}) {",
      "\t${3}",
      "});"
    ],
    "description": "Ember Enumerable"
  },

  ".isAny(...)": {
    "prefix": "is-any",
    "body": [
      "${1:enumerable}.isAny('${2:property}', ${3:bool});"
    ],
    "description": "Ember Enumerable"
  },

  ".toArray(...)": {
    "prefix": "to-array",
    "body": [
      "${1:enumerable}.toArray();"
    ],
    "description": "Ember Enumerable"
  },

  ".get('firstObject')": {
    "prefix": "first-object",
    "body": [
      "${1:enumerable}.get('firstObject');"
    ],
    "description": "Ember Enumerable"
  },

  ".get('lastObject')": {
    "prefix": "last-object",
    "body": [
      "${1:enumerable}.get('lastObject');"
    ],
    "description": "Ember Enumerable"
  }

}
