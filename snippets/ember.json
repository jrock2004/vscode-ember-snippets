{
  "run": {
    "prefix": "run",
    "body": "run((${1}) => {\n\t${2}\n});",
    "description": "run(() => { ... })"
  },
  "lget": {
    "prefix": "lget",
    "body": "let $1 = ${2:this}.get('$1');",
    "description": "let ... get(...)"
  },
  "set": {
    "prefix": "set",
    "body": "${1:this}.set('${2}', ${3});",
    "description": ".set(...)"
  },
  "get": {
    "prefix": "get",
    "body": "${1:this}.get('${2}');",
    "description": ".get(...)"
  },
  "super": {
    "prefix": "super",
    "body": "super.${1}(${2:...arguments});",
    "description": "super.name(...)"
  },
  "init": {
    "prefix": "init",
    "body": "init() {\n\tthis._super(...arguments);\n\n\t${1}\n}",
    "description": "init() { ... }"
  },
  "constructor": {
    "prefix": "constructor",
    "body": "constructor(owner, args) {\n\tsuper(owner, args);\n\n\t${1:// body}\n}",
    "description": "constructor(owner, args)"
  },
  "service": {
    "prefix": "service",
    "body": "@service ${1};",
    "description": "@service name"
  },
  "observer": {
    "prefix": "observer",
    "body": "observer('${1:property}', function() {\n\t${2:// body}\n}),",
    "description": "observer(...)"
  },
  "on": {
    "prefix": "on",
    "body": "on('${1:property}', function() {\n\t${2:// body}\n}),",
    "description": "on(...)"
  },
  "actions": {
    "prefix": "actions",
    "body": "actions: {\n\t${1:// body}\n},",
    "description": "actions: { ... }"
  },
  "computed": {
    "prefix": "computed",
    "body": "@computed('${1:propertyKey}')\nget ${2:property}() {\n\t${3:// body}\n}",
    "description": "@computed(...)"
  },
  "tracked": {
    "prefix": "tracked",
    "body": "@tracked ${1:name} = ${2:value};",
    "description": "@tracked name"
  },
  "calias": {
    "prefix": "calias",
    "body": "@alias('${1:key}') ${2:value};",
    "description": "@alias(...)"
  },
  "cand": {
    "prefix": "cand",
    "body": "@and('${1:key1}', '${2:key2}') ${3:value};",
    "description": "@and(...)"
  },
  "cbool": {
    "prefix": "cbool",
    "body": "@bool(${1:key}) ${2:value};",
    "description": "@bool(...)"
  },
  "ccollect": {
    "prefix": "ccollect",
    "body": "@collect(${1:keys}) ${2:value};",
    "description": "@collect(...)"
  },
  "cempty": {
    "prefix": "cempty",
    "body": "@empty('${1:key}') ${2:value};",
    "description": "@empty(...)"
  },
  "cequal": {
    "prefix": "cequal",
    "body": "@equal('${1:key}', ${2:value}) ${3:name};",
    "description": "@equal(...)"
  },
  "cfilter": {
    "prefix": "cfilter",
    "body": "@filter (${1:key}, function(${2:item}${3:, index}${4:, array}) {\n\treturn ${2:item};\n})\n${5:name};",
    "description": "@filter(...)"
  },
  "cfilterBy": {
    "prefix": "cfilterBy",
    "body": "@filterBy ('${1:key}', ${2:propertyKey}, ${3:value}) ${4:name};",
    "description": "@filterBy(...)"
  },
  "cgt": {
    "prefix": "cgt",
    "body": "@gt('${1:key}', ${2:value}) ${3:name};",
    "description": "@gt(...)"
  },
  "cgte": {
    "prefix": "cgte",
    "body": "@gte('${1:key}', ${2:value}) ${3:name};",
    "description": "@gte(...)"
  },
  "intersect": {
    "prefix": "intersect",
    "body": "@intersect(${1}) ${2:name};",
    "description": "@intersect(...)"
  },
  "clt": {
    "prefix": "clt",
    "body": "@lt('${1:key}', ${2:value}) ${3:name};",
    "description": "@lt(...)"
  },
  "clte": {
    "prefix": "clte",
    "body": "@lte('${1:key}', ${2:value}) ${3:name};",
    "description": "@lte(...)"
  },
  "cmap": {
    "prefix": "cmap",
    "body": "@map(${1:key}, function(${2:item}${3:, index}) {\n\treturn ${2:item};\n}) ${4:name};",
    "description": "@map(...)"
  },
  "cmapBy": {
    "prefix": "cmapBy",
    "body": "@mapBy('${1:key}', '${2:propertyKey}') ${3:name};",
    "description": "@mapBy(...)"
  },
  "cmatch": {
    "prefix": "cmatch",
    "body": "@match('${1:key}', ${2:regEx}) ${3:name};",
    "description": "@match(...)"
  },
  "cmax": {
    "prefix": "cmax",
    "body": "@max('${1:key}') ${2:name};",
    "description": "@max(...)"
  },
  "cmin": {
    "prefix": "cmin",
    "body": "@min('${1:key}') ${2:name};",
    "description": "@min(...)"
  },
  "cnone": {
    "prefix": "cnone",
    "body": "@none('${1:key}') ${2:name};",
    "description": "@none(...)"
  },
  "cnot": {
    "prefix": "cnot",
    "body": "@not('${1:key}') ${2:name};",
    "description": "@not(...)"
  },
  "cnotEmpty": {
    "prefix": "cnotEmpty",
    "body": "@notEmpty('${1:key}') ${2:name};",
    "description": "@notEmpty(...)"
  },
  "coneWay": {
    "prefix": "coneWay",
    "body": "@oneWay('${1:key}') ${2:name};",
    "description": "@oneWay(...)"
  },
  "cor": {
    "prefix": "cor",
    "body": "@or('${1:key1}', '${2:key2}') ${3:name};",
    "description": "@or(...)"
  },
  "creadOnly": {
    "prefix": "creadOnly",
    "body": "@readOnly('${1:key}') ${2:name};",
    "description": "@readOnly(...)"
  },
  "creads": {
    "prefix": "creads",
    "body": "@reads('${1:key}') ${2:name};",
    "description": "@reads(...)"
  },
  "csetDiff": {
    "prefix": "csetDiff",
    "body": "@setDiff('${1:key1}', '${2:key2}') ${3:name};",
    "description": "@setDiff(...)"
  },
  "csort": {
    "prefix": "csort",
    "body": "@sort('${1:itemsKey}', '${2:sortDefinition}') ${3:name};",
    "description": "@sort(...)"
  },
  "csum": {
    "prefix": "csum",
    "body": "@sum('${1:key}') ${2:name};",
    "description": "@sum(...)"
  },
  "cunion": {
    "prefix": "cunion",
    "body": "@union('${1:key1}', '${2:key2}') ${3:name};",
    "description": "@union(...)"
  },
  "cuniq": {
    "prefix": "cuniq",
    "body": "@uniq('${1:key}') ${2:name};",
    "description": "@uniq(...)"
  },
  "cuniqBy": {
    "prefix": "cuniqBy",
    "body": "@uniqBy('${1:key}') ${2:name};",
    "description": "@uniqBy(...)"
  },
  "bind": {
    "prefix": "bind",
    "body": "bind(${1:this}, ${2:this.methodName});",
    "description": "bind(...)"
  },
  "cancel": {
    "prefix": "cancel",
    "body": "cancel('${1:key}');",
    "description": "cancel(...)"
  },
  "debounce": {
    "prefix": "debounce",
    "body": "debounce(${1:this}, '${2:methodName}', ${3:500});",
    "description": "debounce(...)"
  },
  "later": {
    "prefix": "later",
    "body": "later(${1:this}, () => {\n\t${2}\n}, ${3:500});",
    "description": "later(...)"
  },
  "next": {
    "prefix": "next",
    "body": "next(${1:this}, () => {\n\t${2}\n});",
    "description": "next(...)"
  },
  "once": {
    "prefix": "once",
    "body": "once(${1:this}, () => {\n\t${2}\n});",
    "description": "once(...)"
  },
  "schedule": {
    "prefix": "schedule",
    "body": "schedule('${1:queue}', ${2:this}, () => {\n\t${3},\n});",
    "description": "schedule(...)"
  },
  "scheduleOnce": {
    "prefix": "scheduleOnce",
    "body": "scheduleOnce('${1:queue}', ${2:this}, () => {\n\t${3}\n});",
    "description": "scheduleOnce(...)"
  },
  "throttle": {
    "prefix": "throttle",
    "body": "throttle(${1:this}, '${2:methodName}', ${3:500});",
    "description": "throttle(...)"
  },
  "model": {
    "prefix": "model",
    "body": "model(${1:params = \\{\\}}) {\n\t${2://body}\n},",
    "description": "Route: model(...) { ... }"
  },
  "setupController": {
    "prefix": "setupController",
    "body": "setupController(controller, model) {\n\tsuper.setupController(controller, model);\n\n\t${1}\n},",
    "description": "setupController(...) { ... }"
  },
  "beforeModel": {
    "prefix": "beforeModel",
    "body": "beforeModel(${1:transition}) {\n\t${1}\n},",
    "description": "Route: beforeModel(...) { ... }"
  },
  "afterModel": {
    "prefix": "afterModel",
    "body": "afterModel(${1:model, transition}) {\n\t${2}\n},",
    "description": "Route: afterModel(...) { ... }"
  },
  "didReceiveAttrs": {
    "prefix": "didReceiveAttrs",
    "body": "didReceiveAttrs() {\n\tsuper.didReceiveAttrs(...arguments);\n\n\t${1}\n},",
    "description": "Component: didReceiveAttrs() { ... }"
  },
  "didRender": {
    "prefix": "didRender",
    "body": "didRender() {\n\tsuper.didRender(...arguments);\n\n\t${1}\n},",
    "description": "Component: didRender() { ... }"
  },
  "didUpdateAttrs": {
    "prefix": "didUpdateAttrs",
    "body": "didUpdateAttrs() {\n\tsuper.didUpdateAttrs(...arguments);\n\n\t${1}\n},",
    "description": "Component: didUpdateAttrs() { ... }"
  },
  "willUpdate": {
    "prefix": "willUpdate",
    "body": "willUpdate() {\n\tsuper.willUpdate(...arguments);\n\n\t${1}\n},",
    "description": "Component: willUpdate() { ... }"
  },
  "didInsertElement": {
    "prefix": "didInsertElement",
    "body": "didInsertElement() {\n\tsuper.didInsertElement(...arguments);\n\n\t${1}\n},",
    "description": "Component: didInsertElement() { ... }"
  },
  "willDestroyElement": {
    "prefix": "willDestroyElement",
    "body": "willDestroyElement() {\n\tsuper.willDestroyElement(...arguments);\n\n\t${1}\n},",
    "description": "Component: willDestroyElement() { ... }"
  },
  "filterBy": {
    "prefix": "filterBy",
    "body": "${1:enumerable}.filterBy('${2:property}', ${3:value});",
    "description": ".filterBy(...)"
  },
  "mapBy": {
    "prefix": "mapBy",
    "body": "${1:enumerable}.mapBy('${2:property}');",
    "description": ".mapBy(...)"
  },
  "every": {
    "prefix": "every",
    "body": "${1:enumerable}.every(function(${2:item}) {\n\t${3}\n});",
    "description": ".every(...)"
  },
  "is-every": {
    "prefix": "is-every",
    "body": "${1:enumerable}.isEvery('${2:property}', ${3:bool});",
    "description": ".isEvery(...)"
  },
  "is-any": {
    "prefix": "is-any",
    "body": "${1:enumerable}.isAny('${2:property}', ${3:bool});",
    "description": ".isAny(...)"
  },
  "to-array": {
    "prefix": "to-array",
    "body": "${1:enumerable}.toArray();",
    "description": ".toArray(...)"
  },
  "first-object": {
    "prefix": "first-object",
    "body": "${1:enumerable}.get('firstObject');",
    "description": ".get('firstObject')"
  },
  "last-object": {
    "prefix": "last-object",
    "body": "${1:enumerable}.get('lastObject');",
    "description": ".get('lastObject')"
  }
}